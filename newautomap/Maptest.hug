!\---------------------------------------------------------------------------

        A SAMPLE "GAME" DEMONSTRATING THE WONDERS OF MAPPING
        by Cardinal Teulbachs, (c) 1997

        ** updated 4-23-00 for compatibility with Hugo 2.5+ **
	   ** updated July 2011 for compatibility with glk interpreters **
---------------------------------------------------------------------------\!

!:: Raise limits, if necessary (here are some of the limits you're likely to
!   run into first).
!$MAXROUTINES = 320
!$MAXDICT = 1024
!$MAXDICTEXTEND = 0 ! (needed for adding more dictionary words mid-game)

!:: Flags
!#set BETA                ! Compile with the comments-in-transcripts library
                          !   addition (requires "beta.h")
!#set HUGOFIX             ! Compile with HugoFix Debugging Library commands
                          !   available (type $? in game)
!#set VERBSTUBS           ! Include the grammar and routines from verbstubs.g
                          !   and verbstubs.h, respectively
!#set USE_ATTACHABLES     ! Use attachable items
!#set USE_PLURAL_OBJECTS  ! Use plural objects
!#set USE_ROLLABLES       ! Allow the pushing of mobile objects (needs Roodylib)
!#set USE_ROODYLIB
!#set USE_VEHICLES        ! Use vehicle objects
#set VERSIONS            ! Print library versions at compile time

!:: switches              ! example how one can add compiler switches to source
!#switches -ls            ! print compilation stats to .LST file

#ifset HUGOFIX
#set DEBUG
#endif

!:: Constants and global variables (some constants must be set before hugolib
!   is included):

constant GAME_TITLE "GAME TITLE"
constant AUTHOR "YOUR NAME"
constant RELEASE "1.0"
!constant BLURB "An Interactive Blah"
!constant IFID "put-IFID here"
!constant AFTER_PERIOD " "     ! include one space after full stops (as opposed
                               !   to two)
!constant INDENT_SIZE 0        ! no indentation in room descriptions and room
                               !   content listings

!:: Grammar Library Inclusions (grammar must come first)
#ifset USE_ROODYLIB
#include "roodylib.g"
#endif

! new grammar needs to be defined before the including verblib
#include "verblib.g"        ! Verb Library

xverb "map", "m"
        *                                       DoMap
xverb "map", "m"
        * "on"                                  DoMapOn
xverb "map", "m"
        * "off"                                 DoMapOff
xverb "map", "m"
        * "from" object                         DoMap
xverb "map", "m"
        * "game"                                DoFullMap
xverb "map", "m"
        * "game" "from" object                  DoFullMap

                                        ! verbroutines are at end of file

#include "hugolib.h"        ! Standard  Hugo Library
#include "window.h"
#ifset USE_ROODYLIB
#include "roodylib.h"         ! Hugo  Library Updates
#include "newprintstatusline.h"
#endif
#include "newautomap.h"

!::	Other Library Inclusions

!::	Game Initialization	routine
routine init
{
!: First Things First
	SetGlobalsAndFillArrays
!: Screen clear section
#ifclear _ROODYLIB_H
	CenterTitle("Hugo Interactive Fiction")
	cls
#ifset USE_PLURAL_OBJECTS
	InitPluralObjects
#endif
#else
	SimpleIntro
	InitScreen
!: Set up any special libraries
	Init_Calls
#endif
!: Game opening
	IntroText
	MovePlayer(location)
}


routine SetGlobalsAndFillArrays
{
!\ Uncomment and modify this section if your game has scoring and ranking.
	MAX_SCORE = 50
	ranking[0] = "Amateur Adventurer"
	ranking[1] = "Competent Door-Unlocker"
	ranking[2] = "Bomb-Meddling Adventurer"
	ranking[3] = "Master Magic Wand Finder"
	ranking[4] = "The Genuine Article Sample Game Solver"
	MAX_RANK = 4  \!
! if using Roodylib, verbosity can be set to BRIEF, SUPERBRIEF, OR VERBOSE
	verbosity = 2
	counter = -1                    ! 1 turn before turn 0
! statustype options: 0 = no status, 1 = score/turns, 2 = time
! if using Roodylib, can be set to NO_STATUS, SCORE_MOVES, TIME_STATUS,
! CUSTOM_STATUS, INFOCOM_STYLE, MILITARY_TIME
	STATUSTYPE = 1
	TEXTCOLOR = DEF_FOREGROUND
	BGCOLOR = DEF_BACKGROUND
	SL_TEXTCOLOR = DEF_SL_FOREGROUND
	SL_BGCOLOR = DEF_SL_BACKGROUND
	INPUTCOLOR = MATCH_FOREGROUND
#if defined TITLECOLOR
	TITLECOLOR = DEF_FOREGROUND
#endif
!	map_window = sample_window
	prompt = ">"
	DEFAULT_FONT = PROP_ON
#if defined GAME_TITLE
	display.title_caption = GAME_TITLE
#endif
#ifset _ROODYLIB_H
	MakePlayer(you,2) ! sets player as you object, second person
#else
	player = you
#endif
	location = room4
}

routine IntroText
{
	Font(BOLD_ON | DEFAULT_FONT)
	"ADVENTURES IN MAPPING"
	Font(BOLD_OFF| DEFAULT_FONT)
	"An Interactive Whiz-Bang"
	"by Cardinal Teulbachs (c) 2000"
	print "for use with "; BANNER; " and up\n"
	"Type \"map on\" to turn automapper on, \"map off\" to
	turn automapper off, and \"map game\" to display a full
	page map of places you've visited (for this demo, all
	rooms are presumed to have been visited). You can also
	simply type \"map\" if all you want is a one-time display
	of your immediate surroundings."
}

!::	Main game loop
routine main
{
	counter = counter + 1
	run location.each_turn
	runevents
	runscripts
#ifset _ROODYLIB_H
	SpeakerCheck
#else
	if parent(speaking) ~= location
		speaking = 0
#endif
	PrintStatusLine
#ifset _ROODYLIB_H
	Main_Calls
#else
	MapSet
#endif
}

#ifset _ROODYLIB_H
replace ExtraWindows
{
	if not BlockMap
		Mapset
}
#endif

player_character you "you"
{
}

room dummyroom "dummyroom"              ! this is just to connect rooms with
{                                       ! in the up, down, in, and out
!  is visited                            ! directions for purposes of
}                                       ! illustration

room room1 "room 1"                     ! All rooms creatively named with
{                                       ! numbers. Notice how no long_descs
  is visited                            ! are given. Notice how, using the
  s_to { return room2 }                 ! automapper, none are needed (for
  n_to { return room33 }                ! announcing exits, anyway)
  map_list #13
}

room room2 "room 2"
{
  is visited
  n_to { return room1 }                 ! Notice how no printable code is
  se_to { return room3 }                ! found in the dir_to's
  d_to { return dummyroom }
  out_to { return dummyroom }
  map_list #13                          ! Notice how every room has a map_list
}                                       ! property for the full-screen mapper

room room3 "room 3"
{
  is visited                            ! Notice how I've given every room
  nw_to { return room2 }                ! "visited" in order to make things
  e_to { return room4 }                 ! easier on you. Change some of these
  map_list #13                          ! if you want to and view the results
}

room room4 "room 4"                     ! Notice how I didn't give the rooms
{                                       ! any noun properties. You'll have to
  is visited                            ! add them yourself if you want to
  w_to { return room3 }                 ! see "map from <room>" in action.
  n_to { if object = n_obj
		return a_door.door_to
	else
		return room5}        ! (You'll have to do some other
  ne_to { return room6 }                ! juggling besides.)
  sw_to { return room7 }


  map_list #13
}

door a_door "door"                      ! Notice how I've put a door here
{                                       ! just to prove the mappers can
  between room4, room5                  ! handle it
}

room room5 "room 5"
{
  is visited
  s_to { if object = s_obj
		return a_door.door_to
	else
		return room4}
  map_list #13
}

room room6 "room 6"
{
  is visited
  sw_to { return room4 }
  map_list #13
}

room room7 "room 7"
{
 ! is visited
  ne_to { return room4 }
  s_to { return room8 }
  u_to { return dummyroom }
  map_list #13
}

room room8 "room 8"
{
  is visited
  n_to { return room7 }
  w_to { return room9 }
  e_to { return room10 }
  sw_to { return room14 }
  s_to { return room15 }
  se_to { return room16 }
  map_list #13
}

room room9 "room 9"
{
  is visited
  e_to { return room8 }
  out_to { return dummyroom }
  map_list #13
}

room room10 "room 10"
{
  is visited
  w_to { return room8 }
  n_to { return room11 }
  ne_to { return room12 }
  map_list #13
}

room room11 "room 11"
{
  is visited
  s_to { return room10 }
  map_list #13
}

room room12 "room 12"
{
  is visited
  sw_to { return room10 }
  se_to { return room24 }
  map_list #13
}

room room13 "room 13"
{
  is visited
  e_to { return room14 }
  w_to { return room29 }
  in_to { return dummyroom }
  map_list #13
}

room room14 "room 14"
{
  is visited
  w_to { return room13 }
  ne_to { return room8 }
  map_list #13
}

room room15 "room 15"
{
  is visited
  n_to { return room8 }
  u_to { return dummyroom }
  out_to { return dummyroom }
  map_list #13
}

room room16 "room 16"
{
  is visited
  nw_to { return room8 }
  se_to { return room17 }
  map_list #13
}

room room17 "room 17"
{
  is visited
  nw_to { return room16 }
  e_to { return room18 }
  map_list #13
}

room room18 "room 18"
{
  is visited
  w_to { return room17 }
  ne_to { return room20 }
  sw_to { return room26 }
  nw_to { return room23 }
  map_list #13
}

room room19 "room 19"
{
  is visited
  n_to { return room20 }
  map_list #13
}

room room20 "room 20"
{
  is visited
  sw_to { return room18 }
  s_to { return room19 }
  w_to { return room22 }
  n_to { return room21 }
  d_to { return dummyroom }
  in_to { return dummyroom }
  map_list #13
}

room room21 "room 21"
{
  is visited
  s_to { return room20 }
  w_to { return room24 }
  map_list #13
}

room room22 "room 22"
{
  is visited
  e_to { return room20 }
  w_to { return room23 }
  n_to { return room24 }
  map_list #13
}

room room23 "room 23"
{
  is visited
  ne_to { return room24 }
  e_to { return room22 }
  u_to { return dummyroom }
  se_to { return room18 }
  map_list #13
}

room room24 "room 24"
{
  is visited
  sw_to { return room23 }
  e_to { return room21 }
  s_to { return room22 }
  ne_to { return room25 }
  nw_to { return room12 }
  map_list #13
}

room room25 "room 25"
{
  is visited
  sw_to { return room24 }
  map_list #13
}

room room26 "room 26"
{
  is visited
  ne_to { return room18 }
  s_to { return room27 }
  d_to { return dummyroom }
  map_list #13
}

room room27 "room 27"
{
  is visited
  n_to { return room26 }
  sw_to { return room28 }
  map_list #13
}

room room28 "room 28"
{
  is visited
  ne_to { return room27 }
  in_to { return dummyroom }
  u_to { return dummyroom }
  s_to { return room28 }                  ! Notice how I've made rooms 28
  map_list #13                            ! and 33 connect to themselves
}                                         ! just to prove the mappers
                                          ! can handle it
room room29 "room 29"
{
  is visited
  e_to { return room13 }
  w_to { return room30 }
  map_list #13
}

room room30 "room 30"
{
  is visited
  e_to { return room29 }
  w_to { return room31 }
  map_list #13
}

room room31 "room 31"
{
  is visited
  e_to { return room30 }
  w_to { return room32 }
  out_to { return dummyroom }
  d_to { return dummyroom }
  map_list #13
}

room room32 "room 32"                     ! Notice how, when mapping from
{                                         ! an easternmost room, the western
  is visited                              ! ones are lopped off neatly at
  e_to { return room31 }                  ! the edge of the screen (and
  map_list #13                            ! vice versa). The same holds true
}                                         ! for north and south.

room room33 "room 33"
{
  is visited
  s_to { return room1 }
  n_to { return self }
  map_list #13
}

#ifset _WINDOW_H
window_class sample_window
{
  win_left     2  ! leftmost column
  win_top
		return (display.statusline_height + 2)! topmost row
  win_right    29 !rightmost column
  win_bottom
		return (self.win_top + 18 )! bottommost row

  win_textcolor  WHITE    ! text color for any output
  win_backcolor  BLUE    ! background color

}
#endif
